# Resources

Official Openwrt openmesh om2p page: http://wiki.openwrt.org/toh/openmesh/om2p
AP-51 flash utility page for openmesh: http://dev.cloudtrax.com/wiki/om-developer-info

Plugged into the ethernet port closest to the antennae. Not sure if this makes a difference.


Using CentOS (as suggested by the openwrt page), I was able to get the openwrt
binary and the ap51-flash utility to compile.

Install the following packages using yum

  yum -y install minicom lrzsz gawk flex ncurses-devel subversion expect git zlib-devel gcc-c++ gmp gmp-devel unzip wget xz xz-devel patch

1. Download Openwrt trunk:

  svn co svn://svn.openwrt.org/openwrt/trunk openwrt-trunk

  use 29397


2. Downlaod AP51 utility trunk:

  svn co http://dev.cloudtrax.com/downloads/svn/ap51-flash/trunk/ ap51-flash

If you want to use this on Mac OSX, we can checkout an earlier version of the ap51-flash utility:

  [from within ap51-flash directory above]
  svn update -r 252
  make ap51-flash-osx

Otherwise, we can just do a regular:

  make

3. Update the OpenWrt feeds:

  cd openwrt-trunk ; scripts/feeds update -a
  scripts/feeds install luci
  scripts/feeds install batmand
  scripts/feeds install kmod-batman-adv
  scripts/feeds install wifidog

3.a If you want to install wifidog, you will need to either download the
package onto the router after you've flashed it with OpenWRT or compile it into
the firmware. If we want to compile it into the firmware (which will result in
less setup after flashing), then you are going to want to set a default ssh
password so that you can access the router. Wifidog, by default, might close
telnet port 23, which is usually necessary to set the ssh password.

First, run

  cd openwrt-trunk/package/base-files/files/etc

To generate your hash, run

  openssl passwd -1 -salt ihlrowCw

You can replace 'ihlrowCw' with whatever hash you want. When presented with a
prompt, type in the root password you want. For the compiled binary provided,
the root password is 'sodahall'. It might be a good idea to run this command
twice to make sure you typed in your password correctly. With the same hash,
you should receive the same output. Once you have your hash, place the whole
string in the 'shadow' or 'passwd' file in your current directory (whichever
exists...create both if you're unsure). There should be a line that looks like:

  root:x:0:0:99999:7:::

Replace the 'x' with your hash, so that your line looks like

  root:$1$ihlrowCw$7nOQ8MgELdTPkP/dBT7s3.:0:0:99999:7:::

Now go back to the openwrt trunk directory.

4. Make the openwrt binaries:

  make menuconfig

Use the following options:

  Target System -> Atheros AR71xx/AT7240/AR913x/AT934x
  Target Pr0file -> OpenMesh OM2P
  Base system -> <*> om-watchdog
  LuCI -> Collections -> <*> luci
  LuCI -> Server Interfaces -> <*> luci-sgi-uhttpd
  Network -> Routing and Redirection -> <*> batmand
  Network -> Captive Portals -> <*> wifidog
  Kernel Modules -> Network Support -> <*> kmod-batman-adv


Now save the configuration then run:

  make

5. Flash the router. Plug in the OM2P from the port nearest to its powercord to
an ethernet port on your computer. Do NOT plug in the OM2P's power. Just the
ethernet cable. Then run the following:

  ./ap51-flash eth0 path/to/openwrt-ar71xx-generic-om2p-squashfs-factory.bin

obviously, if you're running this on mac, use ./ap51-flash-osx. This should
take a few minutes, and the output should be something like:
> ./ap51-flash-osx en0 ../binaries/openwrt-ar71xx-generic-om2p-squashfs-factory.bin

  [ac:86:74:02:84:a8]: type 'OM2P router' detected
  [ac:86:74:02:84:a8]: OM2P router: tftp client asks for 'fwupgrade.cfg', serving fwupgrade.cfg portion of: ../binaries/openwrt-ar71xx-generic-om2p-squashfs-factory.bin (1 blocks) ...
  [ac:86:74:02:84:a8]: OM2P router: tftp client asks for 'kernel', serving kernel portion of: ../binaries/openwrt-ar71xx-generic-om2p-squashfs-factory.bin (1953 blocks) ...
  [00:26:4a:17:83:f4]: is of type 'redboot' that we have no image for
  [ac:86:74:02:84:a8]: OM2P router: tftp client asks for 'rootfs', serving rootfs portion of: ../binaries/openwrt-ar71xx-generic-om2p-squashfs-factory.bin (4609 blocks) ...
  [ac:86:74:02:84:a8]: OM2P router: image successfully transmitted - writing image to flash ...
  [ac:86:74:02:84:a8]: OM2P router: flash complete. Device ready to unplug.

6. After the router has been flashed, reboot it by unplugging it and plugging it back in. Wait a couple minutes for it to boot up completely, then you should be
able to log in through ssh, using the password you set above:

  ssh root@192.168.1.1

If it times out, try plugging into the other ethernet port on the router.

7. uncomment the line in /etc/config/wireless to enable the wlan0 interface.
   Make sure the router is connected to the internet

8. run
    /etc/init.d/network restart
    wifi up
 We can now verify that 'wlan0' is available to us: run `ifconfig` to see

9. run
    ifconfig wlan0 mtu 1528
    ifconfig wlan0 down
    batctl if add wlan0
    iw wlan0 set type ibss
    iw dev wlan0 set channel 1
    ifconfig wlan0 up
    iw wlan0 ibss join mymeshnetwork 2412
    ifconfig bat0 up

10. Everything should now be running! If you run `batctl o` from one node, you
should see a couple other nodes listed.



-- setting up wifidog --

You need an Auth Server for wifidog to work. There is an older wifidog auth
server project, but we're going to be using the newer authpuppy project
(https://launchpad.net/authpuppy/+download). I'm following
the instructions here: http://www.authpuppy.org/doc/Getting_Started

Download the tar from the link above, and unbundle it. Move the authpuppy directory
to /var/www. To set it up quick, run
    
    sudo chown -R www-data /var/www/authpuppy
    sudo mkdir /var/log/apache2/authpuppy
    sudo chown www-data /var/log/apache2/authpuppy

Make sure you have mod_rewrite enabled on your apache server

    sudo a2enmod rewrite
    sudo service apache2 restart

Place the following in /etc/apache2/sites-enabled/authpuppy:

    <VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName authpuppy.localhost
    ServerAlias authpuppy.test

    DocumentRoot /var/www/authpuppy/web
    DirectoryIndex index.php
    <Directory /var/www/authpuppy/web/>
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
    </Directory>

    Alias /sf /var/www/authpuppy/lib/vendor/symfony/data/web/sf
    <Directory "/var/www/authpuppy/lib/vendor/symfony/data/web/sf">
    AllowOverride All
    Allow from All
    </Directory>

    ErrorLog /var/log/apache2/authpuppy/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn
    CustomLog /var/log/apache2/authpuppy/access.log combined
    </VirtualHost>

Then you have to create the mysql user. For me, I had trouble doing this. Here's
a sequence of instructions that worked for me:
    
    user@yourserver $> sudo apt-get install php5-mysql
    user@yourserver $> mysqladmin -uroot -p create authpuppy
    Enter password:  #Enter the root password
    user@yourserver $> mysql -uroot -p
    Enter password: 
    Welcome to the MySQL monitor.  Commands end with ; or \g.
    Your MySQL connection id is 45
    Server version: 5.0.51a-3ubuntu5.5 (Ubuntu)

    Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

    mysql> create user 'authpuppy'@'localhost' identified by 'authpuppydev';
    Query OK, 0 rows affected (0.21 sec)

    mysql> grant all privileges on authpuppy.* to 'authpuppy'@'localhost' with grant option;
    Query OK, 0 rows affected (0.02 sec)

You should be able to run

    sudo service apache2 restart

and all will work fine. Make your way to 127.0.0.1 in your web browser and follow the
instructions. Make a note of the IP address of your auth server

Now, for each of your wifi nodes, edit /etc/wifidog.conf and follow the instructions
in the file. I got something to SORTA work by just adding

  AuthServer {
    Hostname IP ADDRESS OF AUTH SERVER
    SSLAvailable no
    Path /
  }

Now, if you run

  wifidog -f -d7

from one of your routers, you should be able to see it working.
